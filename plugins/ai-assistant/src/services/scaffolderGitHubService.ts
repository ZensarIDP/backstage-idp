import { DiscoveryApi } from '@backstage/core-plugin-api';
import { FileContent } from '../components/FilePreview/FilePreview';

export interface PullRequestOptions {
  owner: string;
  repo: string;
  title: string;
  description: string;
  files: FileContent[];
  branchName?: string;
  targetBranch?: string;
}

export interface PullRequestResult {
  url: string;
  number: number;
  branchName: string;
}

export class ScaffolderGitHubService {
  constructor(private discoveryApi: DiscoveryApi) {}

  async createPullRequest(options: PullRequestOptions): Promise<PullRequestResult> {
    const {
      owner,
      repo,
      title,
      description,
      files,
      branchName = `ai-assistant/generated-files-${Date.now()}`,
      targetBranch = 'main'
    } = options;

    try {
      // Use Backstage's scaffolder API to create the PR
      const scaffolderUrl = await this.discoveryApi.getBaseUrl('scaffolder');
      
      // Prepare the scaffolder task input
      const taskInput = {
        templateInfo: {
          entity: {
            metadata: {
              name: 'ai-assistant-pr',
              title: 'AI Assistant Generated Pull Request',
            },
          },
        },
        parameters: {
          repoUrl: `github.com?owner=${owner}&repo=${repo}`,
          title,
          description,
          branchName,
          targetBranchName: targetBranch,
          files: files.map(file => ({
            path: file.path,
            content: file.content
          }))
        },
        steps: [
          {
            id: 'publish',
            name: 'Create Pull Request',
            action: 'publish:github:pull-request',
            input: {
              repoUrl: `github.com?owner=${owner}&repo=${repo}`,
              title,
              description: this.formatPRDescription(description, files),
              branchName,
              targetBranchName: targetBranch,
              sourcePath: '.',
            }
          }
        ]
      };

      // Create a temporary workspace with the files
      const workspaceFiles = files.reduce((acc, file) => {
        acc[file.path] = file.content;
        return acc;
      }, {} as Record<string, string>);

      // Execute the scaffolder action
      const response = await fetch(`${scaffolderUrl}/v2/tasks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          templateInfo: taskInput.templateInfo,
          parameters: taskInput.parameters,
          steps: taskInput.steps,
          workspace: workspaceFiles
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(`Failed to create scaffolder task: ${error.message || response.statusText}`);
      }

      const task = await response.json();
      
      // Wait for the task to complete
      const result = await this.waitForTaskCompletion(scaffolderUrl, task.id);
      
      return {
        url: result.output?.remoteUrl || `https://github.com/${owner}/${repo}/pull/${result.output?.pullRequestNumber}`,
        number: result.output?.pullRequestNumber || 0,
        branchName: result.output?.targetBranchName || branchName
      };

    } catch (error) {
      console.error('Error creating pull request:', error);
      throw new Error(`Failed to create pull request: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private async waitForTaskCompletion(scaffolderUrl: string, taskId: string, maxWaitTime: number = 30000): Promise<any> {
    const startTime = Date.now();
    const pollInterval = 1000; // 1 second

    while (Date.now() - startTime < maxWaitTime) {
      const response = await fetch(`${scaffolderUrl}/v2/tasks/${taskId}`);
      
      if (!response.ok) {
        throw new Error(`Failed to get task status: ${response.statusText}`);
      }

      const task = await response.json();
      
      if (task.status === 'completed') {
        return task;
      } else if (task.status === 'failed') {
        throw new Error(`Scaffolder task failed: ${task.lastHeartbeatAt}`);
      }

      // Wait before polling again
      await new Promise(resolve => setTimeout(resolve, pollInterval));
    }

    throw new Error('Task completion timeout');
  }

  private formatPRDescription(description: string, files: FileContent[]): string {
    const filesList = files.map(file => {
      const icon = file.isNew ? 'üÜï' : '‚úèÔ∏è';
      return `- ${icon} \`${file.path}\``;
    }).join('\n');

    return `# AI Assistant Generated Files

${description}

## Files Changed:
${filesList}

Generated by AI Assistant on ${new Date().toLocaleDateString()}.

---
*This pull request was automatically created by the Backstage AI Assistant.*`;
  }
}
