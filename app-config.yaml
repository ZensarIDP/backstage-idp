app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: ZensarIDP

# AI Assistant Configuration (available to frontend)
aiAssistant:
  # GitHub token for repository operations (PR creation, file access)
  githubToken: "${AI_ASSISTANT_GITHUB_TOKEN}"
  openai:
    apiKey: ""
    model: 'gpt-4o' # or 'gpt-3.5-turbo' for cost efficiency
    maxTokens: 4000 # Increased for better responses
    temperature: 0.2 # Lower for more consistent code generation
  # Enhanced context configuration
  context:
    enabled: true
    includeProjectSecrets: true
    includeRepositoryContext: true
    useEnhancedPrompting: true

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'

# AI Configuration for backend services
ai:
  openai:
    apiKey: "${OPENAI_API_KEY}"

# Jira integration configuration
jira:
  baseUrl: "${JIRA_BASE_URL}" # e.g., https://your-company.atlassian.net
  email: "${JIRA_EMAIL}"      # Your Jira email address
  apiToken: "${JIRA_API_TOKEN}" # Your Jira API token

integrations:
  github:
    - host: github.com
      token: "${GITHUB_TOKEN}"
  
  bitbucketCloud:
    - username: "${BITBUCKET_USERNAME}"
      appPassword: "${BITBUCKET_APP_PASSWORD}"

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

auth:
  environment: development
  providers:
    guest: {}
    github:
      development:
        clientId: "${GITHUB_CLIENT_ID}"
        clientSecret: "${GITHUB_CLIENT_SECRET}"
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
    bitbucket:
      development:
        clientId: "${BITBUCKET_CLIENT_ID}"
        clientSecret: "${BITBUCKET_CLIENT_SECRET}"
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  github:
    visibility: public # or 'private', 'internal'
    allowedOwners: ['ZensarIDP', 'Abhi232003'] # ZensarIDP org and Abhi232003 user
  
  bitbucketCloud:
    visibility: public # or 'private'
    allowedWorkspaces: ['zensaridp'] # Bitbucket workspace
  
  defaultAuthor:
    name: Backstage Scaffolder
    email: scaffolder@backstage.io
  defaultCommitMessage: 'Initial commit'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Node.js starter template
    - type: file
      target: ../../templates/nodejs-template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

  providers:
    github:
      # GitHub organization discovery - discovers all repositories in your GitHub org
      zensarProvider:
        organization: 'ZensarIDP'
        catalogPath: '/catalog-info.yaml'
        filters:
          branch: 'main'
          repository: '.*'
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 3 }

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
